//////////////////////////////////////////////////////////////////////////////
// M.A.X. - keys.cpp
//////////////////////////////////////////////////////////////////////////////
#include "files.h"
#include "keys.h"

// Funktionen ////////////////////////////////////////////////////////////////
int LoadKeys(string file){
  if(!FileExists(file.c_str())) return 0;

  KeyExit = GetKeyFromString(ReadIniString("keys","KeyExit","ESCAPE","keys.ini"));
  KeyJumpToAction = GetKeyFromString(ReadIniString("keys","KeyJumpToAction","F1","keys.ini"));
  KeyEndTurn = GetKeyFromString(ReadIniString("keys","KeyEndTurn","RETURN","keys.ini"));
  KeyChat = GetKeyFromString(ReadIniString("keys","KeyChat","TAB","keys.ini"));
  KeyScroll8a = GetKeyFromString(ReadIniString("keys","KeyScroll8a","UP","keys.ini"));
  KeyScroll8b = GetKeyFromString(ReadIniString("keys","KeyScroll8b","KP8","keys.ini"));
  KeyScroll2a = GetKeyFromString(ReadIniString("keys","KeyScroll2a","DOWN","keys.ini"));
  KeyScroll2b = GetKeyFromString(ReadIniString("keys","KeyScroll2b","KP2","keys.ini"));
  KeyScroll6a = GetKeyFromString(ReadIniString("keys","KeyScroll6a","RIGHT","keys.ini"));
  KeyScroll6b = GetKeyFromString(ReadIniString("keys","KeyScroll6b","KP6","keys.ini"));
  KeyScroll4a = GetKeyFromString(ReadIniString("keys","KeyScroll4a","LEFT","keys.ini"));
  KeyScroll4b = GetKeyFromString(ReadIniString("keys","KeyScroll4b","KP4","keys.ini"));
  KeyScroll7 = GetKeyFromString(ReadIniString("keys","KeyScroll7","KP7","keys.ini"));
  KeyScroll9 = GetKeyFromString(ReadIniString("keys","KeyScroll9","KP9","keys.ini"));
  KeyScroll1 = GetKeyFromString(ReadIniString("keys","KeyScroll1","KP1","keys.ini"));
  KeyScroll3 = GetKeyFromString(ReadIniString("keys","KeyScroll3","KP3","keys.ini"));
  KeyZoomIna = GetKeyFromString(ReadIniString("keys","KeyZoomIna","RIGHTBRACKET","keys.ini"));
  KeyZoomInb = GetKeyFromString(ReadIniString("keys","KeyZoomInb","KP_PLUS","keys.ini"));
  KeyZoomOuta = GetKeyFromString(ReadIniString("keys","KeyZoomOuta","SLASH","keys.ini"));
  KeyZoomOutb = GetKeyFromString(ReadIniString("keys","KeyZoomOutb","KP_MINUS","keys.ini"));
  KeyFog = GetKeyFromString(ReadIniString("keys","KeyFog","N","keys.ini"));
  KeyGrid = GetKeyFromString(ReadIniString("keys","KeyGrid","G","keys.ini"));
  KeyScan = GetKeyFromString(ReadIniString("keys","KeyScan","S","keys.ini"));
  KeyRange = GetKeyFromString(ReadIniString("keys","KeyRange","R","keys.ini"));
  KeyAmmo = GetKeyFromString(ReadIniString("keys","KeyAmmo","M","keys.ini"));
  KeyHitpoints = GetKeyFromString(ReadIniString("keys","KeyHitpoints","T","keys.ini"));
  KeyColors = GetKeyFromString(ReadIniString("keys","KeyColors","F","keys.ini"));
  KeyStatus = GetKeyFromString(ReadIniString("keys","KeyStatus","P","keys.ini"));
  KeySurvey = GetKeyFromString(ReadIniString("keys","KeySurvey","H","keys.ini"));
  KeyCalcPath = GetKeyFromString(ReadIniString("keys","KeyCalcPath","H","keys.ini"));

  string MouseStypeStr;
  MouseStypeStr = ReadIniString("keys","MOUSE_STYLE","MODERN","keys.ini");
  if(!MouseStypeStr.compare("OLD_SCHOOL"))MouseStyle=OldSchool;
  else MouseStyle=Modern;

  return 1;
}

// Liefert einen String mit dem Namen der Taste zurück:
char *GetKeyString(SDLKey key){
  switch(key){
    case SDLK_UNKNOWN:return "UNKNOWN";
    case SDLK_BACKSPACE:return "BACKSPACE";
    case SDLK_TAB:return "TAB";
    case SDLK_CLEAR:return "CLEAR";
    case SDLK_RETURN:return "RETURN";
    case SDLK_PAUSE:return "PAUSE";
    case SDLK_ESCAPE:return "ESCAPE";
    case SDLK_SPACE:return "SPACE";
    case SDLK_EXCLAIM:return "EXCLAIM";
    case SDLK_QUOTEDBL:return "QUOTEDBL";
    case SDLK_HASH:return "HASH";
    case SDLK_DOLLAR:return "DOLLAR";
    case SDLK_AMPERSAND:return "AMPERSAND";
    case SDLK_QUOTE:return "QUOTE";
    case SDLK_LEFTPAREN:return "LEFTPAREN";
    case SDLK_RIGHTPAREN:return "RIGHTPAREN";
    case SDLK_ASTERISK:return "ASTERISK";
    case SDLK_PLUS:return "PLUS";
    case SDLK_COMMA:return "COMMA";
    case SDLK_MINUS:return "MINUS";
    case SDLK_PERIOD:return "PERIOD";
    case SDLK_SLASH:return "SLASH";
    case SDLK_0:return "0";
    case SDLK_1:return "1";
    case SDLK_2:return "2";
    case SDLK_3:return "3";
    case SDLK_4:return "4";
    case SDLK_5:return "5";
    case SDLK_6:return "6";
    case SDLK_7:return "7";
    case SDLK_8:return "8";
    case SDLK_9:return "9";
    case SDLK_COLON:return "COLON";
    case SDLK_SEMICOLON:return "SEMICOLON";
    case SDLK_LESS:return "LESS";
    case SDLK_EQUALS:return "EQUALS";
    case SDLK_GREATER:return "GREATER";
    case SDLK_QUESTION:return "QUESTION";
    case SDLK_AT:return "AT";
    case SDLK_LEFTBRACKET:return "LEFTBRACKET";
    case SDLK_BACKSLASH:return "BACKSLASH";
    case SDLK_RIGHTBRACKET:return "RIGHTBRACKET";
    case SDLK_CARET:return "CARET";
    case SDLK_UNDERSCORE:return "UNDERSCORE";
    case SDLK_BACKQUOTE:return "BACKQUOTE";
    case SDLK_a:return "A";
    case SDLK_b:return "B";
    case SDLK_c:return "C";
    case SDLK_d:return "D";
    case SDLK_e:return "E";
    case SDLK_f:return "F";
    case SDLK_g:return "G";
    case SDLK_h:return "H";
    case SDLK_i:return "I";
    case SDLK_j:return "J";
    case SDLK_k:return "K";
    case SDLK_l:return "L";
    case SDLK_m:return "M";
    case SDLK_n:return "N";
    case SDLK_o:return "O";
    case SDLK_p:return "P";
    case SDLK_q:return "Q";
    case SDLK_r:return "R";
    case SDLK_s:return "S";
    case SDLK_t:return "T";
    case SDLK_u:return "U";
    case SDLK_v:return "V";
    case SDLK_w:return "W";
    case SDLK_x:return "X";
    case SDLK_y:return "Y";
    case SDLK_z:return "Z";
    case SDLK_DELETE:return "DELETE";
    case SDLK_KP0:return "KP0";
    case SDLK_KP1:return "KP1";
    case SDLK_KP2:return "KP2";
    case SDLK_KP3:return "KP3";
    case SDLK_KP4:return "KP4";
    case SDLK_KP5:return "KP5";
    case SDLK_KP6:return "KP6";
    case SDLK_KP7:return "KP7";
    case SDLK_KP8:return "KP8";
    case SDLK_KP9:return "KP9";
    case SDLK_KP_PERIOD:return "KP_PERIOD";
    case SDLK_KP_DIVIDE:return "KP_DIVIDE";
    case SDLK_KP_MULTIPLY:return "KP_MULTIPLY";
    case SDLK_KP_MINUS:return "KP_MINUS";
    case SDLK_KP_PLUS:return "KP_PLUS";
    case SDLK_KP_ENTER:return "KP_ENTER";
    case SDLK_KP_EQUALS:return "KP_EQUALS";
    case SDLK_UP:return "UP";
    case SDLK_DOWN:return "DOWN";
    case SDLK_RIGHT:return "RIGHT";
    case SDLK_LEFT:return "LEFT";
    case SDLK_INSERT:return "INSERT";
    case SDLK_HOME:return "HOME";
    case SDLK_END:return "END";
    case SDLK_PAGEUP:return "PAGEUP";
    case SDLK_PAGEDOWN:return "PAGEDOWN";
    case SDLK_F1:return "F1";
    case SDLK_F2:return "F2";
    case SDLK_F3:return "F3";
    case SDLK_F4:return "F4";
    case SDLK_F5:return "F5";
    case SDLK_F6:return "F6";
    case SDLK_F7:return "F7";
    case SDLK_F8:return "F8";
    case SDLK_F9:return "F9";
    case SDLK_F10:return "F10";
    case SDLK_F11:return "F11";
    case SDLK_F12:return "F12";
    case SDLK_F13:return "F13";
    case SDLK_F14:return "F14";
    case SDLK_F15:return "F15";
    case SDLK_NUMLOCK:return "NUMLOCK";
    case SDLK_CAPSLOCK:return "CAPSLOCK";
    case SDLK_SCROLLOCK:return "SCROLLOCK";
    case SDLK_RSHIFT:return "RSHIFT";
    case SDLK_LSHIFT:return "LSHIFT";
    case SDLK_RCTRL:return "RCTRL";
    case SDLK_LCTRL:return "LCTRL";
    case SDLK_RALT:return "RALT";
    case SDLK_LALT:return "LALT";
    case SDLK_RMETA:return "RMETA";
    case SDLK_LMETA:return "LMETA";
    case SDLK_LSUPER:return "LSUPER";
    case SDLK_RSUPER:return "RSUPER";
    case SDLK_MODE:return "MODE";
    case SDLK_COMPOSE:return "COMPOSE";
    case SDLK_HELP:return "HELP";
    case SDLK_PRINT:return "PRINT";
    case SDLK_SYSREQ:return "SYSREQ";
    case SDLK_BREAK:return "BREAK";
    case SDLK_MENU:return "MENU";
    case SDLK_POWER:return "POWER";
    case SDLK_EURO:return "EURO";
    case SDLK_UNDO:return "UNDO";
  }
  return "?";
}

// Liefert den Code der Taste zurück:
SDLKey GetKeyFromString(string key){
  if(!key.compare("UNKNOWN")) return SDLK_UNKNOWN;
  if(!key.compare("BACKSPACE")) return SDLK_BACKSPACE;
  if(!key.compare("TAB")) return SDLK_TAB;
  if(!key.compare("CLEAR")) return SDLK_CLEAR;
  if(!key.compare("RETURN")) return SDLK_RETURN;
  if(!key.compare("PAUSE")) return SDLK_PAUSE;
  if(!key.compare("ESCAPE")) return SDLK_ESCAPE;
  if(!key.compare("SPACE")) return SDLK_SPACE;
  if(!key.compare("EXCLAIM")) return SDLK_EXCLAIM;
  if(!key.compare("QUOTEDBL")) return SDLK_QUOTEDBL;
  if(!key.compare("HASH")) return SDLK_HASH;
  if(!key.compare("DOLLAR")) return SDLK_DOLLAR;
  if(!key.compare("AMPERSAND")) return SDLK_AMPERSAND;
  if(!key.compare("QUOTE")) return SDLK_QUOTE;
  if(!key.compare("LEFTPAREN")) return SDLK_LEFTPAREN;
  if(!key.compare("RIGHTPAREN")) return SDLK_RIGHTPAREN;
  if(!key.compare("ASTERISK")) return SDLK_ASTERISK;
  if(!key.compare("PLUS")) return SDLK_PLUS;
  if(!key.compare("COMMA")) return SDLK_COMMA;
  if(!key.compare("MINUS")) return SDLK_MINUS;
  if(!key.compare("PERIOD")) return SDLK_PERIOD;
  if(!key.compare("SLASH")) return SDLK_SLASH;
  if(!key.compare("0")) return SDLK_0;
  if(!key.compare("1")) return SDLK_1;
  if(!key.compare("2")) return SDLK_2;
  if(!key.compare("3")) return SDLK_3;
  if(!key.compare("4")) return SDLK_4;
  if(!key.compare("5")) return SDLK_5;
  if(!key.compare("6")) return SDLK_6;
  if(!key.compare("7")) return SDLK_7;
  if(!key.compare("8")) return SDLK_8;
  if(!key.compare("9")) return SDLK_9;
  if(!key.compare("COLON")) return SDLK_COLON;
  if(!key.compare("SEMICOLON")) return SDLK_SEMICOLON;
  if(!key.compare("LESS")) return SDLK_LESS;
  if(!key.compare("EQUALS")) return SDLK_EQUALS;
  if(!key.compare("GREATER")) return SDLK_GREATER;
  if(!key.compare("QUESTION")) return SDLK_QUESTION;
  if(!key.compare("AT")) return SDLK_AT;
  if(!key.compare("LEFTBRACKET")) return SDLK_LEFTBRACKET;
  if(!key.compare("BACKSLASH")) return SDLK_BACKSLASH;
  if(!key.compare("RIGHTBRACKET")) return SDLK_RIGHTBRACKET;
  if(!key.compare("CARET")) return SDLK_CARET;
  if(!key.compare("UNDERSCORE")) return SDLK_UNDERSCORE;
  if(!key.compare("BACKQUOTE")) return SDLK_BACKQUOTE;
  if(!key.compare("A")) return SDLK_a;
  if(!key.compare("B")) return SDLK_b;
  if(!key.compare("C")) return SDLK_c;
  if(!key.compare("D")) return SDLK_d;
  if(!key.compare("E")) return SDLK_e;
  if(!key.compare("F")) return SDLK_f;
  if(!key.compare("G")) return SDLK_g;
  if(!key.compare("H")) return SDLK_h;
  if(!key.compare("I")) return SDLK_i;
  if(!key.compare("J")) return SDLK_j;
  if(!key.compare("K")) return SDLK_k;
  if(!key.compare("L")) return SDLK_l;
  if(!key.compare("M")) return SDLK_m;
  if(!key.compare("N")) return SDLK_n;
  if(!key.compare("O")) return SDLK_o;
  if(!key.compare("P")) return SDLK_p;
  if(!key.compare("Q")) return SDLK_q;
  if(!key.compare("R")) return SDLK_r;
  if(!key.compare("S")) return SDLK_s;
  if(!key.compare("T")) return SDLK_t;
  if(!key.compare("U")) return SDLK_u;
  if(!key.compare("V")) return SDLK_v;
  if(!key.compare("W")) return SDLK_w;
  if(!key.compare("X")) return SDLK_x;
  if(!key.compare("Y")) return SDLK_y;
  if(!key.compare("Z")) return SDLK_z;
  if(!key.compare("DELETE")) return SDLK_DELETE;
  if(!key.compare("KP0")) return SDLK_KP0;
  if(!key.compare("KP1")) return SDLK_KP1;
  if(!key.compare("KP2")) return SDLK_KP2;
  if(!key.compare("KP3")) return SDLK_KP3;
  if(!key.compare("KP4")) return SDLK_KP4;
  if(!key.compare("KP5")) return SDLK_KP5;
  if(!key.compare("KP6")) return SDLK_KP6;
  if(!key.compare("KP7")) return SDLK_KP7;
  if(!key.compare("KP8")) return SDLK_KP8;
  if(!key.compare("KP9")) return SDLK_KP9;
  if(!key.compare("KP_PERIOD")) return SDLK_KP_PERIOD;
  if(!key.compare("KP_DIVIDE")) return SDLK_KP_DIVIDE;
  if(!key.compare("KP_MULTIPLY")) return SDLK_KP_MULTIPLY;
  if(!key.compare("KP_MINUS")) return SDLK_KP_MINUS;
  if(!key.compare("KP_PLUS")) return SDLK_KP_PLUS;
  if(!key.compare("KP_ENTER")) return SDLK_KP_ENTER;
  if(!key.compare("KP_EQUALS")) return SDLK_KP_EQUALS;
  if(!key.compare("UP")) return SDLK_UP;
  if(!key.compare("DOWN")) return SDLK_DOWN;
  if(!key.compare("RIGHT")) return SDLK_RIGHT;
  if(!key.compare("LEFT")) return SDLK_LEFT;
  if(!key.compare("INSERT")) return SDLK_INSERT;
  if(!key.compare("HOME")) return SDLK_HOME;
  if(!key.compare("END")) return SDLK_END;
  if(!key.compare("PAGEUP")) return SDLK_PAGEUP;
  if(!key.compare("PAGEDOWN")) return SDLK_PAGEDOWN;
  if(!key.compare("F1")) return SDLK_F1;
  if(!key.compare("F2")) return SDLK_F2;
  if(!key.compare("F3")) return SDLK_F3;
  if(!key.compare("F4")) return SDLK_F4;
  if(!key.compare("F5")) return SDLK_F5;
  if(!key.compare("F6")) return SDLK_F6;
  if(!key.compare("F7")) return SDLK_F7;
  if(!key.compare("F8")) return SDLK_F8;
  if(!key.compare("F9")) return SDLK_F9;
  if(!key.compare("F10")) return SDLK_F10;
  if(!key.compare("F11")) return SDLK_F11;
  if(!key.compare("F12")) return SDLK_F12;
  if(!key.compare("F13")) return SDLK_F13;
  if(!key.compare("F14")) return SDLK_F14;
  if(!key.compare("F15")) return SDLK_F15;
  if(!key.compare("NUMLOCK")) return SDLK_NUMLOCK;
  if(!key.compare("CAPSLOCK")) return SDLK_CAPSLOCK;
  if(!key.compare("SCROLLOCK")) return SDLK_SCROLLOCK;
  if(!key.compare("RSHIFT")) return SDLK_RSHIFT;
  if(!key.compare("LSHIFT")) return SDLK_LSHIFT;
  if(!key.compare("RCTRL")) return SDLK_RCTRL;
  if(!key.compare("LCTRL")) return SDLK_LCTRL;
  if(!key.compare("RALT")) return SDLK_RALT;
  if(!key.compare("LALT")) return SDLK_LALT;
  if(!key.compare("RMETA")) return SDLK_RMETA;
  if(!key.compare("LMETA")) return SDLK_LMETA;
  if(!key.compare("LSUPER")) return SDLK_LSUPER;
  if(!key.compare("RSUPER")) return SDLK_RSUPER;
  if(!key.compare("MODE")) return SDLK_MODE;
  if(!key.compare("COMPOSE")) return SDLK_COMPOSE;
  if(!key.compare("HELP")) return SDLK_HELP;
  if(!key.compare("PRINT")) return SDLK_PRINT;
  if(!key.compare("SYSREQ")) return SDLK_SYSREQ;
  if(!key.compare("BREAK")) return SDLK_BREAK;
  if(!key.compare("MENU")) return SDLK_MENU;
  if(!key.compare("POWER")) return SDLK_POWER;
  if(!key.compare("EURO")) return SDLK_EURO;
  if(!key.compare("UNDO")) return SDLK_UNDO;
  return SDLK_UNKNOWN;  
}

